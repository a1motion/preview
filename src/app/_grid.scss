@mixin reset-offset {
  margin-left: auto;
  left: auto;
  right: auto;
}

@mixin grid-classes($size, $i, $perc) {
  &.offset-#{$size}-#{$i} {
    margin-left: $perc;
  }
  &.pull-#{$size}-#{$i} {
    right: $perc;
  }
  &.push-#{$size}-#{$i} {
    left: $perc;
  }
}
/**
 The following creates a grid system that can be
 used to create response layouts on various display sizes.
 The grid is split into rows of 12 cols.
 A col can then decide its width-span based on what display the user is on.
 An example can be found in the footer.

 Side Note: the following styles are not created by hand,
 incase you're worried about my sanity.
*/
.row {
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 20px;
  &.end {
    margin-bottom: 0;
  }
  &:after {
    content: "";
    display: table;
    clear: both;
  }
  .col {
    float: left;
    box-sizing: border-box;
    padding: 0 $gutter-width / 2;
    min-height: 1px;

    &[class*="push-"],
    &[class*="pull-"] {
      position: relative;
    }

    $i: 1;
    @while $i <= $num-cols {
      $perc: unquote((100 / ($num-cols / $i)) + "%");
      &.sm-#{$i} {
        width: $perc;
        @include reset-offset;
      }
      $i: $i + 1;
    }

    // disabled
    $i: 13;
    @while $i <= $num-cols {
      $perc: unquote((100 / ($num-cols / $i)) + "%");
      @include grid-classes("sm", $i, $perc);
      $i: $i + 1;
    }

    @media only screen and (min-width: #{$medium-breakpoint}) {
      $i: 1;
      @while $i <= $num-cols {
        $perc: unquote((100 / ($num-cols / $i)) + "%");
        &.md-#{$i} {
          width: $perc;
          @include reset-offset;
        }
        $i: $i + 1;
      }

      $i: 1;
      @while $i <= $num-cols {
        $perc: unquote((100 / ($num-cols / $i)) + "%");
        @include grid-classes("md", $i, $perc);
        $i: $i + 1;
      }
    }

    @media only screen and (min-width: #{$large-breakpoint}) {
      $i: 1;
      @while $i <= $num-cols {
        $perc: unquote((100 / ($num-cols / $i)) + "%");
        &.lg-#{$i} {
          width: $perc;
          @include reset-offset;
        }
        $i: $i + 1;
      }

      // disabled
      $i: 13;
      @while $i <= $num-cols {
        $perc: unquote((100 / ($num-cols / $i)) + "%");
        @include grid-classes("lg", $i, $perc);
        $i: $i + 1;
      }
    }

    @media only screen and (min-width: #{$extra-large-breakpoint}) {
      $i: 13;
      @while $i <= $num-cols {
        $perc: unquote((100 / ($num-cols / $i)) + "%");
        &.xl-#{$i} {
          width: $perc;
          @include reset-offset;
        }
        $i: $i + 1;
      }

      // disabled
      $i: 13;
      @while $i <= $num-cols {
        $perc: unquote((100 / ($num-cols / $i)) + "%");
        @include grid-classes("xl", $i, $perc);
        $i: $i + 1;
      }
    }
  }
}
